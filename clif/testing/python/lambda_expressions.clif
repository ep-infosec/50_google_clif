# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "clif/testing/python/lambda_expressions_clif_aux.h":
  namespace `clif_testing`:
    enum SomeEnum

    class Abstract:
      def __init__(self)

    class Derived(Abstract):
      value: int
      def __init__(self, v: int)
      def get(self) -> int
      def __eq__(self, arg: Derived) -> bool

    class NoCopy:
      value: str
      def __init__(self, v: str)
      def get(self) -> str

    class NoCopyNoMove:
      value: int
      def __init__(self)
      @add__init__
      def from_value(self, v: int)

    class FromNoCopy:
      value: str
      def __init__(self, v: str)
      @add__init__
      def from_no_copy(self, nc: NoCopy)
      def get(self) -> str

    class CtorTakesPyObj:
      value: int
      def __init__(self, obj: object)

    class CtorTakesAbstract:
      value: int
      def __init__(self, obj: Abstract)

    class CtorTakesAbstractVirtual:
      value: int
      def __init__(self, obj: Abstract)
      @virtual
      def get(self) -> int

    class CtorTakesVector:
      value: list<int>
      def __init__(self, vec: list<int>)

    class ExtendedCtorTakesVector:
      value: list<int>
      @extend
      def __init__(self, vec: list<int>)

    class CtorTakesSet:
      value: `std::set` as set<int>
      def __init__(self, s: `std::set` as set<int>)

    class ExtendedCtorTakesSet:
      value: `std::set` as set<int>
      @extend
      def __init__(self, s: `std::set` as set<int>)

    class CtorTakesUnorderedSet:
      value: set<int>
      def __init__(self, s: set<int>)

    class ExtendedCtorTakesUnorderedSet:
      value: set<int>
      @extend
      def __init__(self, s: set<int>)

    class ExtendedCtorTakesPyObj:
      value: int
      @extend
      def __init__(self, obj: object)

    def abstract_reference_param(obj: Abstract) -> bytes
    def abstract_pointer_param(obj: Abstract) -> bytes
    def nocopy_nomove_reference_param(obj: NoCopyNoMove) -> bytes
    def nocopy_nomove_pointer_param(obj: NoCopyNoMove) -> bytes
    def unique_pointer_param(obj: Abstract) -> bytes

    class Arg:
      value: int

    class TestCtor:
      value: int
      def __init__(self, arg: Arg = default)

    class TestExtendCtor:
      value: int
      @extend
      def __init__(self, i: int, arg: Arg = default)

    class NoDefaultConstructor:
      def get(self) -> int

    def no_default_ctor_return(value: int) -> (output: NoDefaultConstructor, unused: int)
    def multiple_returns_with_unique_ptr() -> (output: Derived, unused: int)
    def multiple_returns_with_nocopy_object() -> (output: NoCopy, unused: int)

    # Note: the Python variable name is a reserved keyword in C++.
    def returns_one(operator: int) -> bytes

    def takes_vector(vec: list<int>) -> int
    def takes_unique_ptr_vector(vec: list<Derived>) -> bytes
    def takes_set(s: `::std::set` as set<int>) -> int
    def takes_unordered_set(s: set<int>) -> int

    @do_not_release_gil
    def consume_pyobject(vec: list<object>) -> int

    class TestCtxMgr:
      value: int
      @__enter__
      def Enter(self)

      @__exit__
      def Close(self)

    class TestExtendCtxMgr:
      value: int
      @__enter__
      @extend
      def Enter(self)

      @__exit__
      @extend
      def Close(self)
