# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "clif/testing/number_methods.h":
  namespace `clif_testing`:
    class Number:
      # The class includes all PyNumberMethods listed on the following link
      # https://docs.python.org/3.7/c-api/typeobj.html#c.PyNumberMethods
      # except "nb_matrix_multiply" and "nb_inplace_matrix_multiply", which are
      # PY3 only.
      value: float

      def __init__(self, v: float)

      def __add__(self, other: Number) -> Number
      def `::clif_testing::operator+` as fake_plus(self, other: str) -> bytes
      def __sub__(self, other: Number) -> Number
      # Not exercising def __mul__(self, other: Number) -> Number to keep this
      # test simple. There is no special handling of __mul__ in the parser or
      # code generator.
      def `my_mul` as __mul__(self, other: Number) -> Number
      def `::clif_testing::operator*` as my_mul(self, other: Number) -> Number
      def __div__(self, other: Number) -> Number
      def __mod__(self, other: Number) -> Number

      def `power` as __pow__(self, exponent: Number, modulus: Number = default) -> Number
      def `inplace_power` as __ipow__(self, exponent: Number, modulus: Number) -> self

      def `divmod` as __divmod__(self, other: Number) -> tuple<Number, Number>

      def __neg__(self) -> Number
      def __pos__(self) -> Number
      def `abs` as __abs__(self) -> Number
      def __invert__(self) -> Number
      def __lshift__(self, n: int) -> Number
      def __rshift__(self, n: int) -> Number
      def __and__(self, other: Number) -> Number
      def __xor__(self, other: Number) -> Number
      def __or__(self, other: Number) -> Number

      def __int__(self) -> int
      def __float__(self) -> float
      def __bool__(self) -> bool

      def __iadd__(self, other: Number) -> self
      def __isub__(self, other: Number) -> self
      def __imul__(self, other: Number) -> self
      def __idiv__(self, other: Number) -> self
      def __imod__(self, other: Number) -> self
      def __ilshift__(self, n: int) -> self
      def __irshift__(self, n: int) -> self
      def __iand__(self, other: Number) -> self
      def __ixor__(self, other: Number) -> self
      def __ior__(self, other: Number) -> self


      def `floor_division` as __floordiv__(self, other: Number) -> Number
      def __truediv__(self, other: Number) -> Number
      def `inplace_floor_division` as __ifloordiv__(self, other: Number) -> self
      def __itruediv__(self, b:Number) -> self

      def `operator int` as __index__(self) -> int

    class Float:
      def __init__(self, v: float)
      def `operator float` as __float__(self) -> float
      def `operator/` as __floordiv__(self, other: Float) -> int

    class AnotherNumber:
      value: float
      def __init__(self, v: float)
      def __iadd__(self, other: Number) -> self
