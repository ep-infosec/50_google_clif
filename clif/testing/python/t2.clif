# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "clif/testing/t2.h":
  class `K` as Klass:
    def __init__(self, i: int)
    const C: int
    @classmethod
    def `getCplus2` as C2(cls) -> int
    def `i1` as Int1(self) -> int
    i: int = property(`get`, `set`)
    i2: int = property(`get2`)
  def `takeK` as k_check(k: Klass) -> bool
  def k_modify(k: Klass, v: int)
  def k_return() -> Klass

  class Derived(Klass):
    """This class also has a docstring.

    It spans multiple lines.  Plus trailing whitespace.

    None of that should be a problem for the code generator that shoves
    this text into the tp_doc char* slot C string in the generated code.

    """
    j: int
    @add__init__
    def Init(self, i: int, j: int)
    def `has` as __contains__(self, k: int) -> bool

  class NoDefaultConstructor:
    # def __init__(self, a: int) - disabled to demonstrate a user error
    a: int = property(`A`)

  class NoCopy:
    def __init__(self, a: int=default)
    a: int = property(`A`)

  class CtxMgr:
    enum State
    state: State
    @__enter__
    def Lock(self)
    @__exit__
    def Unlock(self)

  class Nested:
    class Inner:
      a: int
    @getter
    def `i` as get_i(self) -> Inner
    @setter
    def `i` as set_i(self, i: Inner)

  def all_nocopy_holds() -> list<NoCopy>

  def vector_inside_unique_ptr() -> list<Nested>

  class MovableButUncopyable:
    def __init__(self, a: int=default)
    a: int = property(`get_a`, `set_a`)

  def func_return_movable_but_uncopyable_type() -> MovableButUncopyable

  def take_nocopy_class(c: MovableButUncopyable)

  class OutputParameter:
    def MovableButUncopyableOutputParameter1(self) -> MovableButUncopyable
    def MovableButUncopyableOutputParameter2(self) -> MovableButUncopyable

  class NestedContainerAttributes:
    int_set_vector: list<`std::set` as set<int>>

  def make_ndefctor(x: int=default) -> NoDefaultConstructor

  def pass_list_as_vector_of_no_default_constructor(
      vec: list<NoDefaultConstructor>) -> int
